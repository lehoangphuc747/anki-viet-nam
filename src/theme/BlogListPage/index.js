import React, { useState } from 'react';
import Layout from '@theme/Layout';
import { BlogCard } from '@theme/BlogPostItem';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faTimes } from '@fortawesome/free-solid-svg-icons';
import styles from './styles.module.css';

const DEFAULT_THUMBNAIL = '/img/default-thumbnail.webp';

  // Category mapping and subcategories
const categories = {
  'T·∫•t c·∫£': { id: 'tab-all', subCategories: [] },
    'Ngo·∫°i ng·ªØ': { 
    id: 'tab-ngoai-ngu',
    subCategories: [
      { label: 'Ti·∫øng Anh', tag: 'english' },
      { label: 'Ti·∫øng Nh·∫≠t', tag: 'japanese' },
      { label: 'Ti·∫øng Trung', tag: 'chinese' },
      { label: 'Ti·∫øng H√†n', tag: 'korean' },
      { label: 'Ti·∫øng Ph√°p', tag: 'france' },
      { label: 'Ti·∫øng ƒê·ª©c', tag: 'germany' },
      { label: 'Ti·∫øng Nga', tag: 'russian' }
    ]
    },
    'Gi√°o d·ª•c': { 
    id: 'tab-giao-duc',
    subCategories: [
      { label: 'THCS', tag: 'thcs' },
      { label: 'THPT', tag: 'thpt' },
      { label: 'ƒê·∫°i h·ªçc', tag: 'university' }
    ]
    },
    'Chuy√™n ng√†nh': { 
    id: 'tab-chuyen-nganh',
    subCategories: [
      { label: 'Y D∆∞·ª£c', tag: 'medical' },
      { label: 'C√¥ng ngh·ªá th√¥ng tin', tag: 'cntt' },
      { label: 'Kinh t·∫ø', tag: 'kinh-te' }
    ]
    },
    'M·∫´u th·∫ª': { 
      id: 'tab-mau-the',
      subCategories: [],
      tag: 'template'
    },
    'Add-ons': {
      id: 'tab-addons',
      subCategories: [],
      tag: 'addons'
    },
    'Kh√°c': {
      id: 'tab-khac',
      subCategories: [],
      tag: 'khac'
    }
  };

function BlogListPage({ items }) {
  const [activeTab, setActiveTab] = useState('T·∫•t c·∫£');
  const [activeSubCategory, setActiveSubCategory] = useState(null);

  const handleTabClick = (tab) => {
    setActiveTab(tab);
    setActiveSubCategory(null);
  };

  const handleSubCategoryClick = (subCategory) => {
    setActiveSubCategory(subCategory);
  };

  const handleClearFilter = () => {
    setActiveTab('T·∫•t c·∫£');
    setActiveSubCategory(null);
  };

  // Filter logic
  const getFilteredItems = () => {
    if (activeTab === 'T·∫•t c·∫£') {
      return items;
    }

    const categoryConfig = categories[activeTab];
    if (categoryConfig && categoryConfig.tag) {
      // N·∫øu l√† tab ƒë·∫∑c bi·ªát (M·∫´u th·∫ª, Add-ons, Kh√°c) th√¨ filter theo tag
      return items.filter(({ content: { frontMatter } }) => {
        const tags = (frontMatter.tags || []).map(tag => tag.toLowerCase());
        return tags.includes(categoryConfig.tag);
      });
    }

    // C√°c tab c√≤n l·∫°i (c√≥ subCategories)
    return items.filter(({ content: { frontMatter } }) => {
      const category = frontMatter.category || '';
      const tags = (frontMatter.tags || []).map(tag => tag.toLowerCase());

      if (activeSubCategory) {
        return category === activeSubCategory.label ||
          tags.includes(activeSubCategory.tag);
      }

      if (!categoryConfig) return false;

      return categoryConfig.subCategories.some(sub =>
        category === sub.label || tags.includes(sub.tag)
      );
    });
  };

  const filteredItems = getFilteredItems();

  return (
    <Layout title="T·∫•t c·∫£ b·ªô th·∫ª" description="C√°c b·ªô th·∫ª Anki ƒë∆∞·ª£c chia s·∫ª b·ªüi c·ªông ƒë·ªìng">
      <div className={styles.main}>
        <h1 className={styles.title}>
            Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Anki Vi·ªát Nam üëã
          </h1>
        <p className={styles.subtitle}>
            D∆∞·ªõi ƒë√¢y l√† c√°c b·ªô th·∫ª ƒë√£ chia s·∫ª c·ªßa c·ªông ƒë·ªìng!
          </p>

        <div className={styles.filterContainer}>
          <div className={styles.clearFilterContainer}>
            <button
              onClick={handleClearFilter}
              className={`${styles.clearFilterBtn} ${activeTab !== 'T·∫•t c·∫£' ? styles.active : ''}`}>
              <FontAwesomeIcon icon={faTimes} className={styles.clearFilterIcon} />
              <span>X√≥a b·ªô l·ªçc</span>
            </button>
          </div>

          <div className={styles.tabContainer}>
            {Object.keys(categories).map((category) => (
              <button
                key={category}
                className={`${styles.tabButton} ${activeTab === category ? styles.active : ''}`}
                onClick={() => handleTabClick(category)}>
                {category}
              </button>
            ))}
            </div>

          {categories[activeTab].subCategories.length > 0 && (
            <div className={styles.subCategoryContainer}>
              {categories[activeTab].subCategories.map((subCategory) => (
                <button
                  key={subCategory.tag}
                  className={`${styles.subCategoryLink} ${activeSubCategory?.tag === subCategory.tag ? styles.active : ''}`}
                  onClick={() => handleSubCategoryClick(subCategory)}>
                  {subCategory.label}
                </button>
              ))}
              </div>
            )}
          </div>

        <div className={styles.postGrid}>
            {filteredItems.map((item, index) => (
              <BlogCard 
                key={index}
                item={item}
                defaultThumbnail={DEFAULT_THUMBNAIL}
              />
            ))}
          </div>

          {filteredItems.length === 0 && (
          <div className={styles.noResults}>
            <p>Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt n√†o ph√π h·ª£p v·ªõi b·ªô l·ªçc hi·ªán t·∫°i.</p>
            </div>
          )}
      </div>
    </Layout>
  );
}

export default BlogListPage;
